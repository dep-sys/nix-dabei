NOTE: this branch pre-generates a disk images and uses a rescue system to write it to disk. While this works in principle, I've switched to another approach which uses a simple initrd to install nixos. Code is in the `kexec` branch, but isn't currently documented. I plan to do so before https://oceansprint.org/

* nix-dabei
contains tooling to install [[https://nixos.org][NixOS]] with [[https://github.com/openzfs/zfs][ZFS]] from a live Linux system.

The primary motivation behind it was to allow non-interactive installation of NixOS such as [[https://hetzner.cloud][hetzner.cloud]] with ZFS.
Available NixOS ISO images at hetzner do not allow non-interactive deployments, while we can't use ZFS with alternative solutions
such as [[https://github.com/elitak/nixos-infect][nixos-infect ]] which works with an existing file system.

To find my earlier approach, which involved a minimal initial ramdisk and =kexec=, look into the [[https://github.com/dep-sys/nix-dabei/tree/kexec][kexec branch]] in this repo.

** Status

nix-dabei is written in a way which should enable it to be used in a variety of cloud environments, but only hetzner.hcloud is implemented so far.
And documentation is lacking, sorry ;)

** How it works
- Use nix-dabei to configure a basic NixOS system by providing an OpenSSH public key and provider-specific metadata.
- Build a ZFS disk image for this system.
- Copy this disk image to a new host, running your providers rescue system.
- Write the disk image to disk and reboot.
- On First boot, the host...
  - acquires an IP address via DHCP.
  - starts the =fetch-instance-data= service to download instance-specifc metadata from the provider and store it in ~/var/run/instance-data.json~. This may include hostname, location, and other things.
  - starts the =rebuild-with-instance-data= service to rebuild the NixOS system from your original flake using the data it just acquired.

- The disk image itself is reusable for as many machines as you like, because =rebuild-with-instance-data= uses the hostname acquired from your provider to select the right =nixosConfiguration= from your flake, by effectively running:

#+begin_src
    nixos-rebuild switch --upgrade --impure --flake "config#$hostname"
#+end_src

See [[./modules/instance-data.nix]] for details.

